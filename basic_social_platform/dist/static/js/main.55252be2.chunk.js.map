{"version":3,"sources":["layout/SignedIn.js","store/actions/authActions.js","layout/SignedOut.js","layout/Navbar.js","dashboard/Notifications.js","projects/ProjectSummary.js","projects/ProjectList.js","dashboard/Dashboard.js","projects/ProjectDetails.js","auth/SignIn.js","auth/SignUp.js","store/actions/ProjectActions.js","projects/CreateProject.js","App.js","serviceWorker.js","store/reducers/AuthReducer.js","store/reducers/ProjectReducer.js","store/reducers/RootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","props","react_default","a","createElement","className","react_router_dom","to","onClick","profile","initials","SignedOut","state","firebase","links","uid","layout_SignedIn","layout_SignedOut","Notifications","notifications","map","notification","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","_ref","project","title","authorFirstName","authorLastName","createdAt","toString","calendar","ProjectList","projects","projects_ProjectSummary","Dashboard","_this$props","this","projects_ProjectList","dashboard_Notifications","react_router","Component","compose","console","log","firestore","ordered","firestoreConnect","collection","limit","orderBy","ownProps","match","params","data","SignIn","email","password","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","_ref3","getFirestore","createUserWithEmailAndPassword","resp","doc","set","createProject","authorId","add","objectSpread","Date","CreateProject","history","push","App","layout_Navbar","exact","path","component","ProjectDetails","React","isLocalhost","Boolean","window","location","hostname","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","initState","AuthReducer","arguments","length","undefined","action","message","ProjectReducer","RootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","authIsReady","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"0QAyBeA,cAAQ,KANI,SAACC,GAC1B,MAAO,CACLC,QAAS,kBAAMD,EC4BR,SAACA,EAAUE,EAAXC,IACYC,EAD2BD,EAAjBC,eAGlBC,OAAOJ,UAAUK,KAAK,WAC7BN,EAAS,CAAEO,KAAM,2BD5BVR,CApBE,SAACS,GACd,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,WAAZ,aACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,QAASP,EAAMP,SAAlB,YACJQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,IAAIF,UAAU,2CACtBJ,EAAMQ,QAAQC,cEAfC,EATG,WACd,OACIT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,WAAZ,WACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,WAAZ,YCsBCf,cARS,SAACoB,GAEvB,MAAM,CACJd,KAAMc,EAAMC,SAASf,KACrBW,QAASG,EAAMC,SAASJ,UAIbjB,CAvBA,SAACS,GAAU,IAChBH,EAAkBG,EAAlBH,KAAMW,EAAYR,EAAZQ,QAERK,EAAQhB,EAAKiB,IAAMb,EAAAC,EAAAC,cAACY,EAAD,CAAUP,QAASA,IAAcP,EAAAC,EAAAC,cAACa,EAAD,MAE1D,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,cAAvB,mBACCS,uBCUMI,EAtBO,SAACjB,GAAU,IACvBkB,EAAkBlB,EAAlBkB,cACR,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACVc,GAAiBA,EAAcC,IAAI,SAAAC,GACnC,OAAOnB,EAAAC,EAAAC,cAAA,MAAIkB,IAAKD,EAAaE,IAC3BrB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAoBgB,EAAaG,KAAjD,KACAtB,EAAAC,EAAAC,cAAA,YAAOiB,EAAaI,SACpBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBqB,IAAOL,EAAaM,KAAKC,UAAUC,mBCE1EC,EAdQ,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QACrB,OACI9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAc2B,EAAQC,OACtC/B,EAAAC,EAAAC,cAAA,sBAAc4B,EAAQE,gBAAtB,IAAwCF,EAAQG,eAAhD,KACAjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,IAA2BqB,IAAOM,EAAQI,UAAUR,SAASS,YAAYC,WAAzE,SCQCC,EAdK,SAAAR,GAAgB,IAAdS,EAAcT,EAAdS,SAClB,OACItC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXmC,GAAYA,EAASpB,IAAI,SAAAY,GACzB,OACE9B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,YAAcyB,EAAQT,GAAID,IAAKU,EAAQT,IAC/CrB,EAAAC,EAAAC,cAACqC,EAAD,CAAgBT,QAASA,yBCFnCU,mLACO,IAAAC,EAEqCC,KAAK3C,MAAvCuC,EAFHG,EAEGH,SAAU1C,EAFb6C,EAEa7C,KAAMqB,EAFnBwB,EAEmBxB,cACxB,OAAIrB,EAAKiB,IAGLb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACyC,EAAD,CAAaL,SAAUA,KAEzBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAC0C,EAAD,CAAe3B,cAAeA,OATnBjB,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUxC,GAAG,mBAJlByC,aA+BTC,cACbzD,YAXsB,SAACoB,GAErB,OADAsC,QAAQC,IAAIvC,GACL,CAEH4B,SAAU5B,EAAMwC,UAAUC,QAAQb,SAClC1C,KAAMc,EAAMC,SAASf,KACrBqB,cAAeP,EAAMwC,UAAUC,QAAQlC,iBAM7CmC,2BAAiB,CACf,CAAEC,WAAY,WAAYC,MAAO,EAAGC,QAAS,CAAC,YAAa,SAC3D,CAAEF,WAAY,gBAAiBC,MAAO,EAAGC,QAAS,CAAC,OAAQ,WAJhDR,CAMbP,GCEcO,cACbzD,YAXsB,SAACoB,EAAO8C,GAC9B,IAAMnC,EAAKmC,EAASC,MAAMC,OAAOrC,GAC3BiB,EAAW5B,EAAMwC,UAAUS,KAAKrB,SAEtC,MAAO,CACLR,QAFcQ,EAAWA,EAASjB,GAAM,KAGxCzB,KAAMc,EAAMC,SAASf,QAMvBwD,2BAAiB,CACf,CAAEC,WAAY,cAHHN,CAxCQ,SAAChD,GAAU,IAEtB+B,EAAkB/B,EAAlB+B,QACR,OAD0B/B,EAATH,KACRiB,IAENiB,EAEA9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAe2B,EAAQC,OACvC/B,EAAAC,EAAAC,cAAA,aAAM4B,EAAQP,UAEhBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,wBAAgB4B,EAAQE,gBAAxB,IAA0CF,EAAQG,eAAlD,KACAjC,EAAAC,EAAAC,cAAA,eAAOsB,IAAOM,EAAQI,UAAUR,SAASS,YAAYC,WAArD,QAONpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,6BApBgBF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUxC,GAAG,sBCLjCuD,6MACFlD,MAAQ,CACJmD,MAAO,GACPC,SAAU,MAGdC,aAAe,SAACC,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOhD,GAAK2C,EAAEK,OAAOC,WAIhCC,aAAe,SAAAP,GACXA,EAAEQ,iBACFP,EAAKlE,MAAM0E,OAAOR,EAAKvD,gFAIlB,IAAA+B,EACuBC,KAAK3C,MAAzB2E,EADHjC,EACGiC,UACR,OAFKjC,EACc7C,KACXiB,IAAYb,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUxC,GAAG,MAG7BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQwE,SAAUjC,KAAK6B,cACrCvE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,SAAf,SACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,QAAQuB,GAAG,QAAQwD,SAAUnC,KAAKqB,gBAEhD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,YAAf,YACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,WAAWuB,GAAG,WAAWwD,SAAUnC,KAAKqB,gBAEtD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uCAAlB,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbuE,EAAY1E,EAAAC,EAAAC,cAAA,aAAMwE,EAAN,KAAyB,gBArCpC5B,aA2DNxD,cAbS,SAACoB,GACvB,MAAO,CACLgE,UAAWhE,EAAMd,KAAK8E,UACtB9E,KAAMc,EAAMC,SAASf,OAIE,SAACL,GAC1B,MAAO,CACLkF,OAAQ,SAACK,GAAD,OAAWvF,GR5BAwF,EQ4BgBD,ER3B5B,SAACvF,EAAUE,EAAXoC,IACYlC,EAD2BkC,EAAjBlC,eAGlBC,OAAOoF,2BACdD,EAAYlB,MACZkB,EAAYjB,UACZjE,KAAK,WACLN,EAAS,CAAEO,KAAM,oBAChBmF,MAAM,SAACC,GACR3F,EAAS,CAAEO,KAAM,cAAeoF,aAVlB,IAACH,KQgCRzF,CAA6CsE,GC3DtDuB,6MACFzE,MAAQ,CACJmD,MAAO,GACPC,SAAU,GACVsB,UAAW,GACXC,SAAU,MAGdtB,aAAe,SAACC,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOhD,GAAK2C,EAAEK,OAAOC,WAIhCC,aAAe,SAAAP,GACXA,EAAEQ,iBACFxB,QAAQC,IAAIgB,EAAKvD,OACjBuD,EAAKlE,MAAMuF,OAAOrB,EAAKvD,gFAGlB,IAAA+B,EACuBC,KAAK3C,MAAzBH,EADH6C,EACG7C,KAAM8E,EADTjC,EACSiC,UACd,OAAG9E,EAAKiB,IAAYb,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUxC,GAAG,MAE7BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQwE,SAAUjC,KAAK6B,cACrCvE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,SAAf,SACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,QAAQuB,GAAG,QAAQwD,SAAUnC,KAAKqB,gBAEhD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,YAAf,YACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,WAAWuB,GAAG,WAAWwD,SAAUnC,KAAKqB,gBAEtD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,aAAf,cACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,OAAOuB,GAAG,YAAYwD,SAAUnC,KAAKqB,gBAEnD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,YAAf,aACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,OAAOuB,GAAG,WAAWwD,SAAUnC,KAAKqB,gBAElD/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uCAAlB,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXuE,EAAY1E,EAAAC,EAAAC,cAAA,aAAMwE,EAAN,KAAyB,gBA9CtC5B,aAmENxD,cAZS,SAACoB,GACvB,MAAO,CACLd,KAAMc,EAAMC,SAASf,KACrB8E,UAAWhE,EAAMd,KAAK8E,YAIC,SAACnF,GAC1B,MAAO,CACL+F,OAAQ,SAACC,GAAD,OAAahG,ETXD,SAACgG,GACrB,OAAO,SAAChG,EAAUE,EAAX+F,GAAqD,IAA/B7F,EAA+B6F,EAA/B7F,YAAa8F,EAAkBD,EAAlBC,aAClC9E,EAAWhB,IACXuD,EAAYuC,IAElB9E,EAASf,OAAO8F,+BACdH,EAAQ1B,MACR0B,EAAQzB,UACRjE,KAAK,SAAC8F,GACN,OAAOzC,EAAUG,WAAW,SAASuC,IAAID,EAAKrE,KAAKT,KAAKgF,IAAI,CAC1DT,UAAWG,EAAQH,UACnBC,SAAUE,EAAQF,SAClB7E,SAAU+E,EAAQH,UAAU,GAAKG,EAAQF,SAAS,OAEnDxF,KAAK,WACNN,EAAS,CAAEO,KAAM,qBAChBmF,MAAM,SAAAC,GACP3F,EAAS,CAAEO,KAAM,eAAgBoF,WSNPI,CAAOC,OAG1BjG,CAA6C6F,WCpD7CW,EApBO,SAAChE,GACnB,OAAO,SAACvC,EAAUE,EAAXoC,GAAqD,IAA/B4D,EAA+B5D,EAA/B4D,aAEnBvC,GAFkDrB,EAAjBlC,YAErB8F,KACZlF,EAAUd,IAAWkB,SAASJ,QAC9BwF,EAAWtG,IAAWkB,SAASf,KAAKiB,IAC1CqC,EAAUG,WAAW,YAAY2C,IAAjC7B,OAAA8B,EAAA,EAAA9B,CAAA,GACOrC,EADP,CAEIE,gBAAiBzB,EAAQ6E,UACzBnD,eAAgB1B,EAAQ8E,SACxBU,SAAUA,EACV7D,UAAW,IAAIgE,QAChBrG,KAAK,WACJN,EAAS,CAAEO,KAAM,iBAAkBgC,cACpCmD,MAAM,SAACC,GACN3F,EAAS,CAAEO,KAAM,uBAAwBoF,YCV/CiB,6MACFzF,MAAQ,CACJqB,MAAO,GACPR,QAAS,MAGbwC,aAAe,SAACC,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOhD,GAAK2C,EAAEK,OAAOC,WAIhCC,aAAe,SAAAP,GACXA,EAAEQ,iBACFP,EAAKlE,MAAM+F,cAAc7B,EAAKvD,OAC9BuD,EAAKlE,MAAMqG,QAAQC,KAAK,8EAQxB,OADiB3D,KAAK3C,MAAdH,KACCiB,IAGLb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQwE,SAAUjC,KAAK6B,cACrCvE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,yBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,SAAf,SACA5E,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,OAAOuB,GAAG,QAAQwD,SAAUnC,KAAKqB,gBAE/C/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,WAAf,QACA5E,EAAAC,EAAAC,cAAA,YAAUmB,GAAG,UAAUlB,UAAU,uBAAuB0E,SAAUnC,KAAKqB,gBAEzE/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uCAAlB,qBAfWH,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUxC,GAAG,mBAvBdyC,aA0DbxD,cAZS,SAACoB,GACvB,MAAO,CACLd,KAAMc,EAAMC,SAASf,OAIE,SAACL,GAC1B,MAAO,CACLuG,cAAe,SAAChE,GAAD,OAAavC,EAASuG,EAAchE,OAIxCxC,CAA6C6G,GCnC7CG,mLAjBX,OACEtG,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqG,EAAD,MACAvG,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAO2D,OAAK,EAACC,KAAK,IAAIC,UAAWlE,IACjCxC,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAO4D,KAAK,eAAeC,UAAWC,IACtC3G,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAO4D,KAAK,UAAUC,UAAW9C,IACjC5D,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAO4D,KAAK,UAAUC,UAAWvB,IACjCnF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAO4D,KAAK,UAAUC,UAAWP,cAX3BS,IAAM9D,WCGlB+D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxD,MACvB,2DAIC,SAASyD,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,GAAwBP,OAAOC,SAASO,MACpDC,SAAWT,OAAOC,SAASQ,OAIvC,OAGFT,OAAOU,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAML,GAAN,sBAEPT,IAgEV,SAAiCa,EAAOP,GAEtCS,MAAMF,GACH7H,KAAK,SAAAgI,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5Cd,UAAUe,cAAcC,MAAMvI,KAAK,SAAAwI,GACjCA,EAAaC,aAAazI,KAAK,WAC7BkH,OAAOC,SAASuB,aAKpBC,EAAgBd,EAAOP,KAG1BlC,MAAM,WACLjC,QAAQC,IACN,mEArFAwF,CAAwBf,EAAOP,GAI/BC,UAAUe,cAAcC,MAAMvI,KAAK,WACjCmD,QAAQC,IACN,gHAMJuF,EAAgBd,EAAOP,MAM/B,SAASqB,EAAgBd,EAAOP,GAC9BC,UAAUe,cACPjB,SAASQ,GACT7H,KAAK,SAAAwI,GACJA,EAAaK,cAAgB,WAC3B,IAAMC,EAAmBN,EAAaO,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjI,QACf0G,UAAUe,cAAcW,YAI1B9F,QAAQC,IACN,iHAKEkE,GAAUA,EAAO4B,UACnB5B,EAAO4B,SAASV,KAMlBrF,QAAQC,IAAI,sCAGRkE,GAAUA,EAAO6B,WACnB7B,EAAO6B,UAAUX,UAO5BpD,MAAM,SAAAgE,GACLjG,QAAQiG,MAAM,4CAA6CA,KChGjE,IAAMC,EAAY,CACdxE,UAAW,MAsCAyE,EAnCK,WAA+B,IAA9BzI,EAA8B0I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBF,EAAWK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAOC,EAAOzJ,MACV,IAAK,cAED,OADAkD,QAAQC,IAAI,eACLkB,OAAA8B,EAAA,EAAA9B,CAAA,GACAzD,EADP,CAEIgE,UAAW,iBAEnB,IAAK,gBAED,OADA1B,QAAQC,IAAI,kBACLkB,OAAA8B,EAAA,EAAA9B,CAAA,GACAzD,EADP,CAEIgE,UAAW,OAEnB,IAAK,kBAED,OADA1B,QAAQC,IAAI,oBACLvC,EACX,IAAK,iBAED,OADAsC,QAAQC,IAAI,kBACLkB,OAAA8B,EAAA,EAAA9B,CAAA,GACAzD,EADP,CAEIgE,UAAW,OAEnB,IAAK,eAED,OADA1B,QAAQC,IAAI,iBACLkB,OAAA8B,EAAA,EAAA9B,CAAA,GACAzD,EADP,CAEIgE,UAAW6E,EAAOrE,IAAIsE,UAE9B,QACI,OAAO9I,IClCbwI,EAAY,CACd5G,SAAU,CACN,CAACjB,GAAI,EAAGU,MAAO,iBAAkBR,QAAS,mBAC1C,CAACF,GAAI,EAAGU,MAAO,iBAAkBR,QAAS,mBAC1C,CAACF,GAAI,EAAGU,MAAO,0BAA2BR,QAAS,qBAkB5CkI,EAdQ,WAA+B,IAA9B/I,EAA8B0I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBF,EAAWK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQC,EAAOzJ,MACX,IAAK,iBAEH,OADAkD,QAAQC,IAAI,kBAAmBsG,EAAOzH,SAC/BpB,EACT,IAAK,uBAEH,OADAsC,QAAQC,IAAI,uBAAwBsG,EAAOrE,KACpCxE,EACT,QACE,OAAOA,YCJFgJ,EAPKC,YAAgB,CAChC/J,KAAMuJ,EACNrH,QAAS2H,EACTvG,UAAW0G,mBACXjJ,SAAUkJ,4DCKZlJ,IAASmJ,cAVM,CACbC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,wCAKT1J,IAASuC,YAAYoH,SAAS,CAAEC,uBAAuB,IAExC5J,QAAf,ECLI6J,EAAQC,YAAYf,EACtB3G,YACI2H,YAAgBC,IAAMC,kBAAkB,CAACnF,4BAAc9F,6BACvDkL,yBAAeC,GACfC,6BAAmBD,EAAU,CAACE,wBAAwB,EAAMC,YAAa,QAASC,mBAAmB,MAM7GC,sBAAYX,GAAO3K,KAAK,WACpBuL,IAASC,OACPrL,EAAAC,EAAAC,cAACoL,EAAA,EAAD,CAAUd,MAAOA,GACfxK,EAAAC,EAAAC,cAACqL,EAAD,OAEFC,SAASC,eAAe,SAE1BtD","file":"static/js/main.55252be2.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signOut } from '../store/actions/authActions'\n\nconst SignedIn = (props) => {\n    return (\n        <ul className=\"right\">\n          <li><NavLink to='/create'>New Post</NavLink></li>\n          <li><a onClick={props.signOut}>Log Out</a></li>\n          <li>\n            <NavLink to='/' className=\"btn btn-floating light-green lighten-1>\">\n              { props.profile.initials }\n            </NavLink>\n            </li>\n        </ul>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedIn)\n\n\n\n","/*\nconst signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCCESS'});\n        }).catch((err) => {\n            dispatch({ type: 'LOGIN_ERROR', err});\n        })\n    }\n}\n\n\nconst signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS' });\n        })\n    }\n}\n\n\nexport default (signIn, signOut)\n\n*/\n\nexport const signIn = (credentials) => {\n    return (dispatch, getState, {getFirebase}) => {\n      const firebase = getFirebase();\n      \n      firebase.auth().signInWithEmailAndPassword(\n        credentials.email,\n        credentials.password\n      ).then(() => {\n        dispatch({ type: 'LOGIN_SUCCESS' });\n      }).catch((err) => {\n        dispatch({ type: 'LOGIN_ERROR', err });\n      });\n  \n    }\n  }\n  \n  export const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n      const firebase = getFirebase();\n  \n      firebase.auth().signOut().then(() => {\n        dispatch({ type: 'SIGNOUT_SUCCESS' })\n      });\n    }\n  }\n\n  export const signUp = (newUser) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n      const firebase = getFirebase();\n      const firestore = getFirestore();\n\n      firebase.auth().createUserWithEmailAndPassword(\n        newUser.email,\n        newUser.password\n      ).then((resp) => {\n        return firestore.collection('users').doc(resp.user.uid).set({\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          initials: newUser.firstName[0] + newUser.lastName[0]\n        })\n      }).then(() => {\n        dispatch({ type: 'SIGNUP_SUCCESS'})\n      }).catch(err => {\n        dispatch({ type: 'SIGNUP_ERROR', err})\n      })\n    }\n  }\n\n  // getFirebase = authentication\n  // getFireStore = data\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst SignedOut = () => {\n    return (\n        <ul className=\"right\">\n          <li><NavLink to='/signup'>Signup</NavLink></li>\n          <li><NavLink to='/signin'>Login</NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOut\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport SignedIn from './SignedIn'\nimport SignedOut from './SignedOut'\nimport { connect } from 'react-redux'\n\nconst Navbar = (props) => {\n  const { auth, profile } = props;\n  // console.log(auth);\n  const links = auth.uid ? <SignedIn profile={profile} /> : <SignedOut />;\n\n  return (\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className=\"container\">\n        <Link to='/' className=\"brand-logo\">Shower Thoughts</Link>\n        {links}\n      </div>\n    </nav>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  // console.log(state);\n  return{\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)","import React from 'react'\nimport moment from 'moment'\n\nconst Notifications = (props) => {\n  const { notifications } = props;\n  return (\n    <div className=\"section\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">Notifications</span>\n          <ul className=\"online-users\">\n            { notifications && notifications.map(notification =>{\n              return <li key={notification.id}>\n                <span className=\"light-green-text\">{notification.user} </span>\n                <span>{notification.content}</span>\n                <div className=\"note-date grey-text\">{moment(notification.time.toDate()).fromNow()}</div>\n              </li>\n            })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Notifications","import React from 'react'\nimport moment from 'moment' // used to reformat date\n\nconst ProjectSummary = ({project}) => {\n    return (\n        <div>\n          <div className=\"card z-depth-0 project-summary projectCard\">\n            <div className=\"card-content grey-text text-darken-3\">\n              <span className=\"card-title\">{project.title}</span>\n              <p>Posted By {project.authorFirstName} {project.authorLastName} </p>\n              <p className=\"grey-text\"> {moment(project.createdAt.toDate().toString()).calendar()} </p>\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default ProjectSummary","import React from 'react'\nimport ProjectSummary from './ProjectSummary'\nimport { Link } from 'react-router-dom'\n\nconst ProjectList = ({projects}) => {\n    return (\n        <div className=\"project-list section\">\n          { projects && projects.map(project => {\n            return (\n              <Link to={'/project/' + project.id} key={project.id}>\n                <ProjectSummary project={project} />\n              </Link>\n            )\n          })} \n        </div>\n    )\n}\n\nexport default ProjectList","import React, { Component } from 'react'\nimport Notifications from './Notifications'\nimport ProjectList from '../projects/ProjectList'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\n\nclass Dashboard extends Component {\n    render() {\n        // console.log(this.props);\n        const { projects, auth, notifications } = this.props;\n        if(!auth.uid) return <Redirect to='/signin' /> // if not logged in redirect to sign in\n\n        return (\n            <div className=\"dashboard container\">\n              <div className=\"row\">\n                <div className=\"col s12 m6\">\n                  <ProjectList projects={projects} />\n                </div>\n                <div className=\"col s12 m5 offset-m1\">\n                  <Notifications notifications={notifications} />\n                </div>\n              </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // projects: state.project.projects // grabbing state from project (RootReducer) -> projects (ProjectReducer)\n        projects: state.firestore.ordered.projects, // display collections from firestore rather dummy data in redux\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications\n    }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'projects', limit: 5, orderBy: ['createdAt', 'desc']}, // we ask firestore here which collection we want to connect, display limit to 5 projects\n    { collection: 'notifications', limit: 5, orderBy: ['time', 'desc']}\n  ])\n)(Dashboard)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\n const ProjectDetails = (props) => {\n     // const id = props.match.params.id;\n     const { project, auth } = props\n     if(!auth.uid) return <Redirect to='/signin' />\n\n     if(project) {\n       return (\n        <div className=\"container section project-details\">\n          <div className=\"card z-dept-0\">\n            <div className=\"card-content\">\n              <span className=\"card-title\">{ project.title }</span>\n              <p> { project.content }</p>\n            </div>\n            <div className=\"card-action grey lighten-4 grey-text\"> \n              <div>Posted by {project.authorFirstName} {project.authorLastName} </div>\n              <div> {moment(project.createdAt.toDate().toString()).calendar()} </div>\n            </div>\n          </div>\n        </div> \n       )\n     } else {\n      return (\n        <div className=\"container center\">\n          <p>Loading post...</p>\n        </div>\n      )\n    }\n  }\n     \n\n const mapStateToProps = (state, ownProps) => {\n   const id = ownProps.match.params.id;\n   const projects = state.firestore.data.projects;\n   const project = projects ? projects[id] : null\n   return {\n     project: project,\n     auth: state.firebase.auth\n   }\n }\n\n export default compose(\n   connect(mapStateToProps),\n   firestoreConnect([\n     { collection: 'projects'}\n   ])\n )(ProjectDetails)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { signIn } from '../store/actions/authActions'\nimport { Redirect } from 'react-router-dom'\n\nclass SignIn extends Component {\n    state = {\n        email: \"\",\n        password: \"\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value // finds id which we defined under input to match the state props\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault(); // prevents refresh of page\n        this.props.signIn(this.state);\n    \n    }\n\n    render() {\n        const { authError, auth } = this.props\n        if(auth.uid) return <Redirect to='/' />\n\n         return (\n            <div className=\"container\">\n              <form className=\"white\" onSubmit={this.handleSubmit}>\n                <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n                <div className=\"input-field\">\n                  <label htmlFor=\"email\">Email</label>\n                  <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <label htmlFor=\"password\">Password</label>\n                  <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <button className=\"btn light-green lighten-1 z-depth-0\">Login</button>\n                  <div className=\"red-text container\">\n                  { authError ? <p> { authError } </p> : null }\n                  </div>\n                </div>\n              </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError, // auth stored in rootReducer, authError stored in AuthReducer\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn) ","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signUp } from '../store/actions/authActions'\n\nclass SignUp extends Component {\n    state = {\n        email: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value // finds id which we defined under input to match the state props\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault(); // prevents refresh of page\n        console.log(this.state);\n        this.props.signUp(this.state)\n    }\n\n    render() {\n        const { auth, authError } = this.props;\n        if(auth.uid) return <Redirect to=\"/\" />\n        return (\n            <div className=\"container\">\n              <form className=\"white\" onSubmit={this.handleSubmit}>\n                <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n                <div className=\"input-field\">\n                  <label htmlFor=\"email\">Email</label>\n                  <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <label htmlFor=\"password\">Password</label>\n                  <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <button className=\"btn light-green lighten-1 z-depth-0\">Sign Up</button>\n                  <div className=\"red-text center\">\n                    { authError ? <p> { authError } </p> : null }\n                  </div>\n                </div>\n              </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\n","const createProject = (project) => {\n    return (dispatch, getState, {getFirestore, getFirebase}) => {\n        // make async call to database\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const authorId = getState().firebase.auth.uid;\n        firestore.collection('projects').add({ //// ref to our projects collection in firebase\n            ...project, \n            authorFirstName: profile.firstName,\n            authorLastName: profile.lastName,\n            authorId: authorId,\n            createdAt: new Date()\n        }).then(() => {\n            dispatch({ type: 'CREATE_PROJECT', project });\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_PROJECT_ERROR', err })\n        })\n    }\n};\n\nexport default createProject\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport createProject from '../store/actions/ProjectActions'\nimport { Redirect } from 'react-router-dom'\n\nclass CreateProject extends Component {\n    state = {\n        title: \"\",\n        content: \"\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value // finds id which we defined under input to match the state props\n        })\n    }\n\n    handleSubmit = e => {\n        e.preventDefault(); // prevents refresh of page\n        this.props.createProject(this.state);\n        this.props.history.push('/');\n    }\n    // we create a project in this component which gets passed as an action to ProjectActions. In ProjectActions, it gets\n    // dispatched to the ProjectReducer where it checks the the type of action. Once it finds a matching action type,\n    // it will update the state of that action type to the RootReducer\n\n    render() {\n        const { auth } = this.props\n        if(!auth.uid) return <Redirect to='/signin' />\n\n        return (\n            <div className=\"container\">\n              <form className=\"white\" onSubmit={this.handleSubmit}>\n                <h5 className=\"grey-text text-darken-3\">Express Your Thoughts</h5>\n                <div className=\"input-field\">\n                  <label htmlFor=\"title\">Title</label>\n                  <input type=\"text\" id=\"title\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <label htmlFor=\"content\">Body</label>\n                  <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange} />\n                </div>\n                <div className=\"input-field\">\n                  <button className=\"btn light-green lighten-1 z-depth-0\">Create Project</button>\n                </div>\n              </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createProject: (project) => dispatch(createProject(project))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './layout/Navbar'\nimport Dashboard from './dashboard/Dashboard'\nimport ProjectDetails from './projects/ProjectDetails'\nimport SignIn from './auth/SignIn'\nimport SignUp from './auth/SignUp'\nimport CreateProject from './projects/CreateProject'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/project/:id' component={ProjectDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateProject} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    authError: null\n}\n\nconst AuthReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'LOGIN_ERROR':\n            console.log('login error');\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n        case 'LOGIN_SUCCESS':\n            console.log('log in success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            console.log('sign out success');\n            return state \n        case 'SIGNUP_SUCCESS':\n            console.log('signup success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNUP_ERROR':\n            console.log('signup failed');\n            return {\n                ...state,\n                authError: action.err.message\n            }\n        default:\n            return state\n    }\n}\n\n\nexport default AuthReducer\n","const initState = {\n    projects: [\n        {id: 1, title: 'Blah blah blah', content: \"Yah yah yah yah\"},\n        {id: 2, title: 'Boo hoo boo ho', content: \"Yee yee yee yee\"},\n        {id: 3, title: 'Blockah blockah blockah', content: \"Yup yup yuppers\"}\n    ]\n}\n\nconst ProjectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'CREATE_PROJECT':\n          console.log('created project', action.project);\n          return state;\n        case 'CREATE_PROJECT_ERROR':\n          console.log('create project error', action.err);\n          return state;\n        default: \n          return state;\n    }\n}\n\n\nexport default ProjectReducer","import AuthReducer from './AuthReducer'\nimport ProjectReducer from './ProjectReducer'\nimport { combineReducers } from 'redux'\nimport { firestoreReducer } from 'redux-firestore' // syncs firestore with the redux state\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst RootReducer = combineReducers({\n    auth: AuthReducer,\n    project: ProjectReducer,\n    firestore: firestoreReducer, // this will sync our firebase store to redux\n    firebase: firebaseReducer // this will sync our auth firebase to redux\n})\n\nexport default RootReducer","  import firebase from 'firebase/app'\n  import 'firebase/firestore'\n  import 'firebase/auth'\n  \n  // Your web app's Firebase configuration\n  var fbConfig = {\n    apiKey: \"AIzaSyCdn6KMd9ZNXT9vK0ZdnC6GIV38p12k2yk\",\n    authDomain: \"shower-thoughts1.firebaseapp.com\",\n    databaseURL: \"https://shower-thoughts1.firebaseio.com\",\n    projectId: \"shower-thoughts1\",\n    storageBucket: \"\",\n    messagingSenderId: \"727318479724\",\n    appId: \"1:727318479724:web:1da956ec20a2c48a\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(fbConfig); \n\n  firebase.firestore().settings({ timestampsInSnapshots: true })\n\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport RootReducer from './store/reducers/RootReducer'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { reactReduxFirebase, getFirebase, authIsReady } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig'\n\n\nconst store = createStore(RootReducer, \n    compose(\n        applyMiddleware(thunk.withExtraArgument({getFirestore, getFirebase})),\n        reduxFirestore(fbConfig),\n        reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true })\n        )\n    );\n//withExtraArgument allows us to add an extra argument to projectActions\n\n\nauthIsReady(store).then(() => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <App />\n      </Provider>,\n      document.getElementById(\"root\")\n    );\n    serviceWorker.register();\n  });\n  // this ensures <App /> does not render till firebase is ready"],"sourceRoot":""}